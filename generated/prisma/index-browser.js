
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.DealershipScalarFieldEnum = {
  id: 'id',
  name: 'name',
  password: 'password',
  isDeleted: 'isDeleted'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  street1: 'street1',
  street2: 'street2',
  state: 'state',
  city: 'city',
  zip: 'zip',
  phone: 'phone',
  email: 'email',
  isDeleted: 'isDeleted',
  dealershipId: 'dealershipId'
};

exports.Prisma.ProductCompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  companyType: 'companyType',
  dealershipId: 'dealershipId',
  isDeleted: 'isDeleted'
};

exports.Prisma.BayerProductScalarFieldEnum = {
  id: 'id',
  trait: 'trait',
  variety: 'variety',
  treatment: 'treatment',
  seedSize: 'seedSize',
  packaging: 'packaging',
  cropType: 'cropType',
  productDetail: 'productDetail',
  dealerPricing: 'dealerPricing',
  endUserPricing: 'endUserPricing',
  agiisId: 'agiisId',
  sapId: 'sapId',
  isDeleted: 'isDeleted',
  productCompanyId: 'productCompanyId'
};

exports.Prisma.SeedProductScalarFieldEnum = {
  id: 'id',
  trait: 'trait',
  variety: 'variety',
  treatment: 'treatment',
  seedSize: 'seedSize',
  packaging: 'packaging',
  cropType: 'cropType',
  dealerPricing: 'dealerPricing',
  endUserPricing: 'endUserPricing',
  isDeleted: 'isDeleted',
  productCompanyId: 'productCompanyId'
};

exports.Prisma.RegularProductScalarFieldEnum = {
  id: 'id',
  product: 'product',
  type: 'type',
  description: 'description',
  dealerPricing: 'dealerPricing',
  endUserPricing: 'endUserPricing',
  isDeleted: 'isDeleted',
  productCompanyId: 'productCompanyId'
};

exports.Prisma.PurchaseOrderScalarFieldEnum = {
  id: 'id',
  purchaseOrderName: 'purchaseOrderName',
  isQuote: 'isQuote',
  isSimple: 'isSimple',
  customerId: 'customerId',
  orderDate: 'orderDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.PurchaseOrderItemScalarFieldEnum = {
  id: 'id',
  puchaseOrderId: 'puchaseOrderId',
  productCompanyId: 'productCompanyId',
  productId: 'productId',
  quantity: 'quantity',
  note: 'note',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.CompanyType = exports.$Enums.CompanyType = {
  Seed: 'Seed',
  Bayer: 'Bayer',
  Regular: 'Regular'
};

exports.CropType = exports.$Enums.CropType = {
  Corn: 'Corn',
  Sorghum: 'Sorghum',
  Soybean: 'Soybean',
  Canola: 'Canola',
  Alfalfa: 'Alfalfa',
  Palletbox: 'Palletbox'
};

exports.Prisma.ModelName = {
  Dealership: 'Dealership',
  Customer: 'Customer',
  ProductCompany: 'ProductCompany',
  BayerProduct: 'BayerProduct',
  SeedProduct: 'SeedProduct',
  RegularProduct: 'RegularProduct',
  PurchaseOrder: 'PurchaseOrder',
  PurchaseOrderItem: 'PurchaseOrderItem'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
